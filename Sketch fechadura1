/*
   AUTOR:   Hálefy Faria
   SKETCH:  Fechadura Eletronica Multifator de desbloqueio.
   DATA:    Dezembro 2022
*/

// INCLUSÃO DAS BIBLIOTECAS
#include <Adafruit_Fingerprint.h> //Blibioteca de funcionamento do leitor de impressao digital
#include <SoftwareSerial.h>       //Blibioteca para funcionamento do Monitor Serial
#include <Keypad.h>               //Blibioteca de funcionamento do Teclado matricial
#include <SPI.h>                  //Biblioteca de comunicação SPI, para comunição do módulo RFID
#include <MFRC522.h>              //Biblioteca do módulo RFID
#include <EEPROM.h>               //Biblioteca da memória EEPROM
#include <MemoryLib.h>            //Biblioteca para gerenciar a EEPROM com variáveis
#include "Wire.h"                 //Biblioteca de funcionamento do módulo RTC
#include <LiquidCrystal_I2C.h>    //Blibioteca de funcionamento do Display LCD


// DEFINIÇÕES
#define pinTrava 12    //Trava Eletrica no pino 12
#define buzer 22       //Buzer no pino 22
#define ledGreen 24    //Led verde no pino 2
#define ledRed 26      //Led vermelho no pino 3
#define button 13      //Botão de cadastro no pino 4
#define SDA_RFID 53    //SDA do RFID no pino 10
#define RST_RFID 49    //Reset do RFID no pino 9
#define mySerial Serial1

#define DS1307_ADDRESS 0x68          // Modulo RTC no endereco 0x68
LiquidCrystal_I2C lcd (0x27, 16, 2); // Modulo I2C display no endereco 0x27
byte zero = 0x00;

// INSTANCIANDO OBJETOS

Adafruit_Fingerprint finger = Adafruit_Fingerprint(&mySerial);

// DECLARAÇÃO DAS VARIÁVEIS E FUNCOES

uint8_t numID = 1;
bool gravar = false;                   // variável gravar do tipo booleana iniciada como falsa

uint8_t modoGravacaoID(uint8_t IDgravar);  

MFRC522 mfrc522(SDA_RFID, RST_RFID);   //Inicializa o módulo RFID
MemoryLib memory(1, 2);                //Inicializa a biblioteca MemoryLib. Parametros: memorySize=1 (1Kb) / type=2 (LONG)

int maxCards = memory.lastAddress / 2; //Cada cartão ocupa duas posições na memória. Para 1Kb será permitido o cadastro de 101 cartões
String cards[101] = {};                //Array com os cartões cadastrados
int cont = 0;                          // Variável cont do tipo inteiro iniciada = a 0
int cont2 = 0;                         // Variável cont2 do tipo inteiro iniciada = a 0
unsigned long s = 0;                   // Variável s do tipo unsigned long iniciada = a 0
unsigned long s2 = 0;                  // Variável s2 do tipo unsigned long iniciada = a 0
unsigned long tempoinicio = 0;         // Variável tempoinicio do tipo unsigned long iniciada = a 0
unsigned long s2no = 0;                // Variável s2no do tipo unsigned long iniciada = a 0
unsigned long sma = 0;                 // Variável sma do tipo unsigned long iniciada = a 0
unsigned long s2ma = 0;                // Variável s2ma do tipo unsigned long iniciada = a 0
unsigned long s2mad = 0;               // Variável s2mad do tipo unsigned long iniciada = a 0
const byte qtdLinhas = 4;
const byte qtdColunas = 4;

char matriz_teclas[qtdLinhas][qtdColunas] = {   // definição das posicões e componentes na matriz do teclado 
  {'1', '2', '3', 'A'},
  {'4', '5', '6', 'B'},
  {'7', '8', '9', 'C'},
  {'*', '0', '#', 'D'},
};


byte Linhas[qtdLinhas] = {3, 4, 6, 7};          // indica quais pinos se referem as linhas
byte Colunas[qtdColunas] = {8, 9, 10, 11};      // indica quais pinos se referem as colunas


Keypad teclado = Keypad(makeKeymap(matriz_teclas), Linhas, Colunas, qtdLinhas, qtdColunas); // inicia o teclado matricial

String senha = ("1234");     // senha definida para fazer cadastros e altercações no sistema
String senha2 = ("3645");    // senha definida para utilização como chave
boolean ss = false;          // variável ss do tipo booleana iniciada como falsa
boolean rfid = false;        // variável rfid do tipo booleana iniciada como falsa
boolean fingerp = false;     // variável fingerp do tipo booleana iniciada como falsa
boolean noite = false;       // variável noite do tipo booleana iniciada como falsa
boolean noitest = false;     // variável noitest do tipo booleana iniciada como falsa

void setup() {
  pinMode(pinTrava, OUTPUT);     // define pinTrava como saída
  pinMode(buzer, OUTPUT);        // define buzer como saída
  digitalWrite(pinTrava, HIGH);  // define pinTrava em valor alto
  
  Wire.begin();
  Serial.begin(9600);
  finger.begin(57600);
  lcd.begin (16, 2);
  SPI.begin();

  while (!Serial); 
  delay(100);
  if (finger.verifyPassword()) {                       //verifica se o sensor de impressão digital doi encontado
    Serial.println("Sensor biometrico encontrado!");
  } else {
    Serial.println("Sensor biometrico não encontrado! Verifique a conexão e reinicie o sistema");
    while (true) {
      delay(1);
    }
  }
  Serial.println("Fim do Setup!");
  lcd.clear();                     // limpa o display LCD
  mfrc522.PCD_Init();              //Inicia o modulo RFID MFRC522
  ReadMemory();                    //Retorna os cartões armazenados na memória EEPROM para o array
  //SelecionaDataeHora();          //A linha pode ser retirada apos setar a data e hora
 }

 /*uint8_t readnumber(void) {
     uint8_t num = 0;

  while (num == 0) {
    while (! Serial.available());
    num = Serial.parseInt();
  }
  return num;
 }*/

// função que retorna um valor lido no teclado matricial para exclusão de #id da memória do modulo de impressão digital

 uint8_t readnumber2(void) { 
  uint8_t num2=0;
  char digito = '0';
  while (digito!= '*') {
    digito = teclado.getKey();
      if(digito){
         lcd.clear();
          lcd.setCursor(cont2 + 6, 1);
          lcd.print(digito);
          num2 += digito;
          cont2++;
      }
 }
  return num2;
}
//------------------------------------------------------------------------------------------------------------------------
void loop() {
  tempoinicio = millis();  //função millis conta o tempo em milisegundos desde que o arduino foi iniciado
  datahora();              // chama a função datahora()para exibição de data e hora no display
  getFingerprintIDez();    // chama a função getFingerprintIDez()para leitura de impressão digital
  lerrfid();               // chama a função lerrfid()para leitura de tags RFID
  
  char tecla_pressionada = teclado.getKey(); //armazana o caracter lido no teclado na variável tecla_pressionada
  
  // busca os dados de data e hora no modulo RTC e faz a conversão dos dados para decimal
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire.write(zero);
  Wire.endTransmission();
  Wire.requestFrom(DS1307_ADDRESS, 7);
  int segundos = ConverteparaDecimal(Wire.read());
  int minutos = ConverteparaDecimal(Wire.read());
  int horas = ConverteparaDecimal(Wire.read() & 0b111111);
  int diadasemana = ConverteparaDecimal(Wire.read());
  int diadomes = ConverteparaDecimal(Wire.read());
  int mes = ConverteparaDecimal(Wire.read());
  int ano = ConverteparaDecimal(Wire.read());
//------------------------------------------------------------------------------------------------------------------------
  if (horas < 6) {
    if (rfid == true) {
       rfid = false;                
     if (fingerp==true) {
        ss=true;  
        fingerp=false;   
     }
    }
       if((ss==true) && (tempoinicio < s2)){
        if(fingerp==true){
         tecladonoite();
          fingerp=false;
          rfid = false;
          s=0;
          s2=0;
          ss=false;  
        }  
        }
      if(tempoinicio > s2+5000){
         ss=false;  
      }
    if ((noite==true) && (millis() < s2mad+3000)){
       Unlock();
       s=0;
       s2mad=0;
       noite=false;
    }else{
       noite=false;
    }
  }
//----------------------------------------------------------------------------------------------------------------------
  if ((horas >= 6) && (horas < 12)) {
    if (fingerp == true) {
        fingerp = false;
      if (rfid==true) {
         ss=true;     
      }
    }
    if((ss==true) && (tempoinicio < s2ma)){
        Unlock();
        ss=false;
        fingerp=false;
        rfid = false;
        sma=0;
        s2ma=0;
    }else{
        ss=false;
    }
  }
//------------------------------------------------------------------------------------------------------------------------
  if ((horas >= 12) && (horas < 18)) {
    if (rfid == true) {
        rfid = false;
      if (fingerp==true) {
         ss=true;     
      }
    }
    if((ss==true) && (tempoinicio < s2)){
        Unlock();
        ss=false;
        rfid = false;
        fingerp=false;
        s=0;
        s2=0;
    }else{
        ss=false;
    }
  }
//-----------------------------------------------------------------------------------------------------------------------
  if (horas >= 18) {
    if (fingerp == true) {
         fingerp = false;
      if (rfid==true) {
         ss=true;  
      }
    }
    if((ss==true)&&(millis() < s2ma)){
       tecladonoite();
       fingerp=false;
       rfid = false;
       sma=0;
       s2ma=0;
       ss=false;     
    }else{
       ss=false;
    }
 
    if ((noite==true) && (millis() < s2no)){
       Unlock();
       sma=0;
       s2no=0;
       noite=false;
    }else{
       noite=false;
    }
  }
//-----------------------------------------------------------------------------------------------------------------------  
  if (tecla_pressionada == 'A'){
    digitalWrite(buzer, HIGH);
    delay(50);
    digitalWrite(buzer, LOW);
    cadadm();
  }
  if (tecla_pressionada == 'B') {
    digitalWrite(buzer, HIGH);
    delay(50);
    digitalWrite(buzer, LOW);
    deladm();
  }
  if (tecla_pressionada == 'C') {
    digitalWrite(buzer, HIGH);
    delay(50);
    digitalWrite(buzer, LOW);
    cadadm2();
  }
  if (tecla_pressionada == 'D'){
    digitalWrite(buzer, HIGH);
    delay(50);
    digitalWrite(buzer, LOW);
    lcd.setCursor(0, 0);
    lcd.print(" Isso Excluira");
    lcd.setCursor(0, 1);
    lcd.print(" Todas as TAGs! ");
    delay(2000);
    deletecards();
  }
  if (gravar) {
    modoGravacaoID(0);
    gravar = false;
  }
}

//-----------------------------------------------------------------------------------------------------------------------

uint8_t modoGravacaoID(uint8_t IDgravar) {

  int p = -1;
 if(IDgravar<=4){
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Aprox. Digital p");
  lcd.setCursor(0, 1);
  lcd.print("Gravacao ID #");
  lcd.setCursor(13, 1);
  lcd.print(IDgravar);
  delay(2000);
    while (p != FINGERPRINT_OK) {
    p = finger.getImage();
    char digito = teclado.getKey();
      if (digito == '*') {
        lcd.clear();
        digitalWrite(buzer, HIGH);
        delay(50);
        digitalWrite(buzer, LOW);
        break;
        return;
      }
    switch (p) {
      case FINGERPRINT_OK:
          lcd.clear();
          lcd.setCursor(0, 0);
          lcd.print(" Leit. Concluida");
          delay(2000);
          break;
      case FINGERPRINT_NOFINGER:
          delay(200);
          break;
      case FINGERPRINT_PACKETRECIEVEERR:
          lcd.clear();
          lcd.setCursor(0, 0);
          lcd.print("      Erro");
          delay(2000);
          break;
      case FINGERPRINT_IMAGEFAIL:
          lcd.clear();
          lcd.setCursor(0, 0);
          lcd.print("      Erro");
          delay(2000);
          break;
      default:
          lcd.clear();
          lcd.setCursor(0, 0);
          lcd.print("      Erro");
          delay(2000);
          break;
    }
  }

  // OK successo!

    p = finger.image2Tz(1);
    switch (p) {
      case FINGERPRINT_OK:
          lcd.clear();
          lcd.setCursor(0, 0);
          lcd.print("Leit. Convertida");
         break;
      case FINGERPRINT_IMAGEMESS:
          lcd.clear();
          lcd.setCursor(0, 0);
          lcd.print("      Erro");
          return p;
      case FINGERPRINT_PACKETRECIEVEERR:
          lcd.clear();
          lcd.setCursor(0, 0);
          lcd.print("      Erro");
          delay(2000);
          return p;
      case FINGERPRINT_FEATUREFAIL:
          lcd.clear();
          lcd.setCursor(0, 0);
          lcd.print("      Erro");
          return p;
      case FINGERPRINT_INVALIDIMAGE:
          lcd.clear();
          lcd.setCursor(0, 0);
          lcd.print("      Erro");
          return p;
      default:
          lcd.clear();
          lcd.setCursor(0, 0);
          lcd.print("      Erro");
          delay(2000);
          return p;
    }
  
  lcd.setCursor(0, 1);
  lcd.print(" Remova o Dedo!");
  delay(2000);
  p = 0;
  while (p != FINGERPRINT_NOFINGER) {
    p = finger.getImage();
    char digito = teclado.getKey();
      if (digito == '*') {
        lcd.clear();
        digitalWrite(buzer, HIGH);
        delay(50);
        digitalWrite(buzer, LOW);
        break;
        return;
      }
  }
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("ID #");
  lcd.setCursor(4, 0);
  lcd.print(IDgravar);
  lcd.setCursor(7, 0);
  lcd.print("Coloque o");
  p = -1;
  lcd.setCursor(0, 1);
  lcd.print("Mesmo Dedo Novam");

  while (p != FINGERPRINT_OK) {
    p = finger.getImage();
    char digito = teclado.getKey();
      if (digito == '*') {
        lcd.clear();
        digitalWrite(buzer, HIGH);
        delay(50);
        digitalWrite(buzer, LOW);
        break;
        return;
      }
    switch (p) {
      case FINGERPRINT_OK:
          lcd.clear();
          lcd.setCursor(0, 0);
          lcd.print("Leit. Concluida");
          delay(2000);
          break;
      case FINGERPRINT_NOFINGER:
          delay(200);
          break;
      case FINGERPRINT_PACKETRECIEVEERR:
          lcd.clear();
          lcd.setCursor(0, 0);
          lcd.print("      Erro");
          delay(2000);
          break;
      case FINGERPRINT_IMAGEFAIL:
          lcd.clear();
          lcd.setCursor(0, 0);
          lcd.print("      Erro");
          delay(2000);
          break;
      default:
          lcd.clear();
          lcd.setCursor(0, 0);
          lcd.print("      Erro");
          delay(2000);
          break;
    }
  }
  
  // OK successo!

  p = finger.image2Tz(2);
  switch (p) {
    case FINGERPRINT_OK:
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("Leit. Convertida");
        delay(2000);
        break;
    case FINGERPRINT_IMAGEMESS:
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("      Erro");
        delay(2000);
        return p;
    case FINGERPRINT_PACKETRECIEVEERR:
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("      Erro");
        delay(2000);
        return p;
    case FINGERPRINT_FEATUREFAIL:
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("      Erro");
        delay(2000);
        return p;
    case FINGERPRINT_INVALIDIMAGE:
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("      Erro");
        delay(2000);
        return p;
    default:
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("      Erro");
        delay(2000);
        return p;
  }

  // OK convertido!
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print(" Criando Modelo");
  delay(2000);
  p = finger.createModel();
  if (p == FINGERPRINT_OK) {
  } else if (p == FINGERPRINT_PACKETRECIEVEERR) {
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("      Erro");
    delay(2000);
    return p;
  } else if (p == FINGERPRINT_ENROLLMISMATCH) {
    return p;
  } else {
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("      Erro");
    delay(2000);
    return p;
  }
  p = finger.storeModel(IDgravar);
  if (p == FINGERPRINT_OK) {
    lcd.setCursor(0, 1);
    lcd.print("ID #");
    lcd.setCursor(4, 1);
    lcd.print(IDgravar);
    lcd.setCursor(6, 1);
    lcd.print("Armazenado");
    delay(5000);
  } else if (p == FINGERPRINT_PACKETRECIEVEERR) {
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("      Erro");
    delay(2000);
    return p;
  } else if (p == FINGERPRINT_BADLOCATION) {
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Erro grav");
    delay(2000);
    return p;
  } else if (p == FINGERPRINT_FLASHERR) {
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Erro de escrita");
    delay(2000);
    return p;
  } else {
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("      Erro");
    delay(2000);
    return p;
  }
  lcd.clear();
}else{
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print(" Numero Maximo ");
  lcd.setCursor(0, 1);
  lcd.print(" de IDs cadast. ");
  delay(3000);
  lcd.clear();
  return;
}

}
//-------------------------------------------------------------------------------------
int getFingerprintIDez() {
  uint8_t p = finger.getImage();
  if (p != FINGERPRINT_OK)  return -1;

  p = finger.image2Tz();
  if (p != FINGERPRINT_OK)  return -1;

  p = finger.fingerFastSearch();
  if (p != FINGERPRINT_OK)  return -1;

  //Encontrou uma digital!
  if (finger.fingerID == 0) {
   
    digitalWrite(buzer, HIGH);
    delay(50);
    digitalWrite(buzer, LOW);
    numID++;
    modoGravacaoID(numID);
    return 0;

  } else {
    fingerp = true;
    s=tempoinicio;
    s2 = s+3000;
    s2mad = s+7000;
    digitalWrite(buzer, HIGH);
    delay(50);
    digitalWrite(buzer, LOW);
    return finger.fingerID;
  }
}

//-------------------------------------------------------------------------------------------------------
void cadadm() {
 
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Digite a senha : ");
  String temp;
  while (true) {
    char digito = teclado.getKey();
    lcd.setCursor(2, 4);
    if (digito){
      if (digito == '*') {
        lcd.clear();
        cont=0;
        digitalWrite(buzer, HIGH);
        delay(50);
        digitalWrite(buzer, LOW);
        break;
      }else{
        digitalWrite(buzer, HIGH);
        delay(50);
        digitalWrite(buzer, LOW);
        lcd.setCursor(cont + 6, 1);
        lcd.print("*");
        temp += digito;
        cont++;
      }
    }
    if (temp.length() >= 4){
      if (temp == senha) {
        digitalWrite(buzer, HIGH);
        delay(800);
        digitalWrite(buzer, LOW);
        lcd.clear();
        lcd.setCursor(3, 0);
        lcd.print(" Sucesso! ");
        lcd.setCursor(2, 1);
        lcd.print(" Modo Admin ");
        gravar = true;
        cont = 0;
        delay(2000);
        break;
      } else {
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print(" Senha Incorreta ");
        digitalWrite(buzer, HIGH);
        delay(50);
        digitalWrite(buzer, LOW);
        delay(50);
        digitalWrite(buzer, HIGH);
        delay(50);
        digitalWrite(buzer, LOW);
        delay(50);
        digitalWrite(buzer, HIGH);
        delay(50);
        digitalWrite(buzer, LOW);
        cont = 0;
        delay(2000);
        break;
      }
    }
  }
  lcd.clear();
}

//--------------------------------------------------------------------------------------------
void deladm() {

  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Digite a senha : ");
  String temp;
  while (true) {
    char digito = teclado.getKey();
    lcd.setCursor(2, 4);
    if (digito){
       if (digito == '*') {
         lcd.clear();
         cont=0;
         digitalWrite(buzer, HIGH);
         delay(50);
         digitalWrite(buzer, LOW);
         break;
       }else{
         digitalWrite(buzer, HIGH);
         delay(50);
         digitalWrite(buzer, LOW);
         lcd.setCursor(cont + 6, 1);
         lcd.print("*");
         temp += digito;
         cont++;
       }
    }
    if (temp.length() >= 4) {
      if (temp == senha) {
         digitalWrite(buzer, HIGH);
         delay(800);
         digitalWrite(buzer, LOW);
         lcd.clear();
         lcd.setCursor(0, 0);
         lcd.print("Modo de Exclusao ");
         delay(2000);
         lcd.clear();
         lcd.setCursor(0, 0);
         lcd.print("Digite o ID e");
         lcd.setCursor(0, 1);
         lcd.print("Tecle * Excluir");
         cont=0;
         uint8_t temp2;
         for(int i =0; i<2; i++){
            char digito = teclado.getKey();
            lcd.setCursor(2, 4);
            lcd.setCursor(cont + 6, 1);
            lcd.print(digito);
            temp2 += digito;
            cont++;
         }
         uint8_t id2 = readnumber2()-42;
         uint8_t id=0;
         if((id2 >= 48) && (id2 <= 57)){
          id=id2-48;
         }
         if((id2 >= 97) && (id2 <= 106)){
          id=id2-87;
         }
         cont2=0;
         if (id == 0) {// ID #0 não permitido, tente novamente!
         return;
         }
         lcd.clear();
         lcd.setCursor(0, 0);
         lcd.print("Excluindo ID #");
         lcd.setCursor(14, 0);
         lcd.print(id);
         delay(2000);
         cont=0;
         deleteFingerprint(id);
         delay(2000);
         break;
      }else {
          digitalWrite(buzer, HIGH);
          delay(50);
          digitalWrite(buzer, LOW);
          delay(50);
          digitalWrite(buzer, HIGH);
          delay(50);
          digitalWrite(buzer, LOW);
          delay(50);
          digitalWrite(buzer, HIGH);
          delay(50);
          digitalWrite(buzer, LOW);
          lcd.clear();
          lcd.setCursor(0, 0);
          lcd.print(" Senha Incorreta ");
          cont = 0;
          delay(2000);
          break;
      }
    }
  }
  lcd.clear();
}

//----------------------------------------------------------------------------------------------------
void deletecards() {
  
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Digite a senha : ");
  String temp;
  while (true){
    char digito = teclado.getKey();
    lcd.setCursor(2, 4);
    if (digito){
      if (digito == '*') {
         lcd.clear();
         cont=0;
         digitalWrite(buzer, HIGH);
         delay(50);
         digitalWrite(buzer, LOW);
         break;
       }else{
         digitalWrite(buzer, HIGH);
         delay(50);
         digitalWrite(buzer, LOW);
         lcd.setCursor(cont + 6, 1);
         lcd.print("*");
         temp += digito;
         cont++;
       }
    }
    if (temp.length() >= 4) {
      if (temp == senha){
        digitalWrite(buzer, HIGH);
        delay(800);
        digitalWrite(buzer, LOW);
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("Excluindo Tags!");
        delay(2000);

        //Escreve zero em todos os enderecos da EEPROM
        for (int address = 0; address <= memory.lastAddress; address++) {
          memory.write(address, 0);
        }
        ReadMemory(); //Atualiza os valores do array
        digitalWrite(ledGreen, LOW);

        delay(2000);
        break;
      }else {
          digitalWrite(buzer, HIGH);
          delay(50);
          digitalWrite(buzer, LOW);
          delay(50);
          digitalWrite(buzer, HIGH);
          delay(50);
          digitalWrite(buzer, LOW);
          delay(50);
          digitalWrite(buzer, HIGH);
          delay(50);
          digitalWrite(buzer, LOW);
          lcd.clear();
          lcd.setCursor(0, 0);
          lcd.print("Senha incorreta!");
          cont = 0;
          delay(2000);
          break;
      }
    }
  }
  lcd.clear();
}

//----------------------------------------------------------------------------------------------
uint8_t deleteFingerprint(uint8_t id) {
  uint8_t p = -1;

  p = finger.deleteModel(id);

  if (p == FINGERPRINT_OK) {
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("    Excluido");
    lcd.setCursor(0, 1);
    lcd.print(" Com Sucesso!!!");
  } else if (p == FINGERPRINT_PACKETRECIEVEERR) {
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("      Erro");
    delay(2000);
    return p;
  } else if (p == FINGERPRINT_BADLOCATION) {
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("      Erro");
    delay(2000);
    return p;
  } else if (p == FINGERPRINT_FLASHERR) {
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("      Erro");
    delay(2000);
    return p;
  } else {
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("      Erro");
    delay(2000);
    return p;
  }
}

//------------------------------------------------------------------------------------------------------------
void Unlock() {
  //Abre o acesso
  digitalWrite(ledGreen, HIGH);
  digitalWrite(ledRed, LOW);
  digitalWrite(pinTrava, LOW);
 // digitalWrite(buzer, HIGH);
  delay(500);
  digitalWrite(pinTrava, HIGH);
  digitalWrite(ledGreen, LOW);
 // digitalWrite(buzer, LOW);
  rfid = false;
  fingerp = false;
  delay(500);
}
//------------------------------------------------------------------------------------------------------
/*----- EFETUA A LEITURA DO CARTAO RFID -----*/
String ReadCard() {
  String UID = "";
  //Verifica a presença de um novo cartao e efetua a leitura
  if (mfrc522.PICC_IsNewCardPresent() && mfrc522.PICC_ReadCardSerial()) {
    //Retorna o UID para a variavel UIDcard
    for (byte i = 0; i < mfrc522.uid.size; i++) {
      UID += String(mfrc522.uid.uidByte[i]);
    }
  }
  return UID;
}

//----- CADASTRA CARTÃO DE ACESSO ---------------------------------------------------------------------
void RecUser() {
  String UID = "";
  boolean deleteCard = false;
  lcd.clear();
  //Efetua a leitura do cartao para cadastro
  //Aprox 5 segundos para cadastrar o cartao
  for (int t = 0; t < 150; t++) {
    delay(10);
    //Acende os leds verde e vermelho
    digitalWrite(ledGreen, HIGH);
    digitalWrite(ledRed, HIGH);
    lcd.setCursor(0, 0);
    lcd.print("Aproxime Cartao!");
    //Faz a leitura o cartao
    UID = ReadCard();
    if (UID != "") {
      //Se leu um cartão, mantém somente o led verde acesso enquanto segue executando o procedimento
      digitalWrite(ledRed, LOW);
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("Cartao Cadastrado");

      //Verifica se o cartao ja esta cadastrado
      for (int c = 0; c < maxCards; c++) {
        //Se já estiver cadastrado, exclui o cartão do array e também da memória
        if (cards[c] == UID) {
          digitalWrite(ledRed, HIGH);
          digitalWrite(ledGreen, LOW);
          lcd.clear();
          lcd.setCursor(0, 0);
          lcd.print(" Cartao Excluido");
          cards[c] = "0";
          deleteCard = true;
        }
      }
      break; //finaliza o for
    }
  }

  //Cancela o cadastro se nenhum cartao foi lido
  if (UID == "") {
    //Apaga os leds verde e vermelho
    digitalWrite(ledGreen, LOW);
    digitalWrite(ledRed, LOW);
    return;
  }

  if (deleteCard == false) {
    //Se for inclusão de novo cartão, verifica se ainda existe espaco para novos cadastros
    //Se a última posição da memória for diferente de zero, pisca o led vermelho sinalizando
    //que não existe mais espaço para novos cartões, e finaliza o procedimento
    if (cards[maxCards - 1].toInt()  != 0) {
      digitalWrite(ledGreen, LOW);
      for (int i = 0; i < 10; i++) {
        digitalWrite(ledRed, HIGH);
        delay(100);
        digitalWrite(ledRed, LOW);
        delay(100);
      }
      return;
    }
  }
  //Adiciona o cartão no array, somente se for inclusão de novo cartão
  if (deleteCard == false) {
    for (int c = 0; c < maxCards; c++) {
      if (cards[c].toInt() == 0) { //Posicao livre
        cards[c] = UID;
        break; //finaliza o for
      }
    }
  }
  //Grava na memória os cartões do array
  //Cada cartão ocupa duas posições da memória
  for (int e = 0; e <= memory.lastAddress; e++) { //Limpa os valores da memória
    memory.write(e, 0);
  }
  int a = 0;
  for (int c = 0; c < maxCards; c++) {
    if (cards[c].toInt() != 0) {
      memory.write(a, cards[c].substring(0, 6).toInt());
      memory.write(a + 1, cards[c].substring(6, cards[c].length()).toInt());
      a += 2;
    }
  }
  //Retorna os valores da memória para o array, para ajustar as posições do cartão no array como está na memória
  ReadMemory();

  if (deleteCard == false) {
    digitalWrite(ledGreen, LOW);
    return;
  } else {
    //Apaga os leds verde e vermelho
    digitalWrite(ledGreen, LOW);
    digitalWrite(ledRed, LOW);
  }
}

//----- RETORNA OS DADOS DA MEMÓRIA PARA O ARRAY ------------------------------------------------------------------
void ReadMemory() {
  int a = 0;
  for (int c = 0; c < maxCards; c++) {
    cards[c] = String(memory.read(a)) + String(memory.read(a + 1));
    a += 2;
  }
}

//----------------------------------------------------------------------------------------------------------------
void cadadm2() {
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Digite a senha : ");
  String temp;
  while (true) {
    char digito = teclado.getKey();
    lcd.setCursor(2, 4);
    if (digito){
      if (digito == '*') {
         lcd.clear();
         cont=0;
         digitalWrite(buzer, HIGH);
         delay(50);
         digitalWrite(buzer, LOW);
         break;
       }else{
         digitalWrite(buzer, HIGH);
         delay(50);
         digitalWrite(buzer, LOW);
         lcd.setCursor(cont + 6, 1);
         lcd.print("*");
         temp += digito;
         cont++;
       }
     }
    if (temp.length() >= 4){
      if (temp == senha) {
        digitalWrite(buzer, HIGH);
        delay(800);
        digitalWrite(buzer, LOW);
        lcd.clear();
        lcd.setCursor(3, 0);
        lcd.print(" Sucesso! ");
        lcd.setCursor(2, 1);
        lcd.print(" Modo Admin ");
        RecUser();
        cont = 0;
        delay(2000);
        break;
      } else {
         digitalWrite(buzer, HIGH);
         delay(50);
         digitalWrite(buzer, LOW);
         delay(50);
         digitalWrite(buzer, HIGH);
         delay(50);
         digitalWrite(buzer, LOW);
         delay(50);
         digitalWrite(buzer, HIGH);
         delay(50);
         digitalWrite(buzer, LOW);
         lcd.clear();
         lcd.setCursor(0, 0);
         lcd.print(" Senha Incorreta ");
         cont = 0;
         break;
      }
    }
  }
  lcd.clear();
}

//--------------------------------------------------------------------------------------------------------------
void SelecionaDataeHora()   //Seta a data e a hora do DS1307
{
  byte segundos = 00; //Valores de 0 a 59
  byte minutos = 28; //Valores de 0 a 59
  byte horas = 10; //Valores de 0 a 23
  byte diadasemana = 1; //Valores de 0 a 6 - 0=Domingo, 1 = Segunda, etc.
  byte diadomes = 14; //Valores de 1 a 31
  byte mes = 11; //Valores de 1 a 12
  byte ano = 22; //Valores de 0 a 99
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire.write(zero); //Stop no CI para que o mesmo possa receber os dados

  //As linhas abaixo escrevem no CI os valores de
  //data e hora que foram colocados nas variaveis acima
  Wire.write(ConverteParaBCD(segundos));
  Wire.write(ConverteParaBCD(minutos));
  Wire.write(ConverteParaBCD(horas));
  Wire.write(ConverteParaBCD(diadasemana));
  Wire.write(ConverteParaBCD(diadomes));
  Wire.write(ConverteParaBCD(mes));
  Wire.write(ConverteParaBCD(ano));
  Wire.write(zero);
  Wire.endTransmission();
}

byte ConverteParaBCD(byte val)
{
  //Converte o número de decimal para BCD
  return ( (val / 10 * 16) + (val % 10) );
}

byte ConverteparaDecimal(byte val)
{
  //Converte de BCD para decimal
  return ( (val / 16 * 10) + (val % 16) );
}

void datahora() {
  // Le os valores (data e hora) do modulo DS1307
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire.write(zero);
  Wire.endTransmission();
  Wire.requestFrom(DS1307_ADDRESS, 7);
  int segundos = ConverteparaDecimal(Wire.read());
  int minutos = ConverteparaDecimal(Wire.read());
  int horas = ConverteparaDecimal(Wire.read() & 0b111111);
  int diadasemana = ConverteparaDecimal(Wire.read());
  int diadomes = ConverteparaDecimal(Wire.read());
  int mes = ConverteparaDecimal(Wire.read());
  int ano = ConverteparaDecimal(Wire.read());

  // Mostra os dados no display
  lcd.backlight();

  lcd.setCursor(0, 0);
  lcd.print("    ");
  // Acrescenta o 0 (zero) se a hora for menor do que 10
  if (horas < 10)
    lcd.print("0");
  lcd.print(horas);
  lcd.print(":");
  // Acrescenta o 0 (zero) se minutos for menor do que 10
  if (minutos < 10)
    lcd.print("0");
  lcd.print(minutos);
  lcd.print(":");
  if (segundos < 10)
    lcd.print("0");
  lcd.print(segundos);
  lcd.setCursor(2, 1);
  // Mostra o dia da semana
  switch (diadasemana)
  {
    case 0: lcd.print("Dom");
      break;
    case 1: lcd.print("Seg");
      break;
    case 2: lcd.print("Ter");
      break;
    case 3: lcd.print("Qua");
      break;
    case 4: lcd.print("Qui");
      break;
    case 5: lcd.print("Sex");
      break;
    case 6: lcd.print("Sab");
  }
  lcd.setCursor(6, 1);
  // Acrescenta o 0 (zero) se dia do mes for menor do que 10
  if (diadomes < 10)
    lcd.print("0");
    lcd.print(diadomes);
    lcd.print("/");
  // Acrescenta o 0 (zero) se mes for menor do que 10
  if (mes < 10)
    lcd.print("0");
    lcd.print(mes);
    lcd.print("/");
    lcd.print(ano);
}
//-----------------------------------------------------------------------------------------------------------------
void lerrfid() {
  //Variável UID recebe o valor do cartão lido
  String UID = ReadCard();

  if (UID != "") {
    boolean access = false;
    //Efetua a leitura de todas as posições do array
    for (int c = 0; c <= maxCards; c++) {
      if (UID == cards[c]) {
        //Se a posição do array for igual ao cartão lido, seta a varíavel como verdadeira e finaliza o for
         cont2++;
        digitalWrite(buzer, HIGH);
        delay(50);
        digitalWrite(buzer, LOW);
        delay(500);
        access = true;
        rfid = true;
        sma=tempoinicio;
        s2ma = sma+3000;
        s2no = sma+7000;
        return rfid;
      }
    }
    //Variável verdadeira, efetua o acesso. Caso contrário, pisca o led vermelho
    if (access) {
    } else {
      for (int i = 0; i < 3; i++) {
        digitalWrite(ledRed, HIGH);
        digitalWrite(buzer, HIGH);
        delay(50);
        digitalWrite(ledRed, LOW);
        digitalWrite(buzer, LOW);
        delay(50);
      }
      delay(500);
    }
  }
}
void tecladonoite(){
       
   String temp;
   while (true){
    char digito = teclado.getKey();
    lcd.setCursor(2, 4);
    datahora();
    if (digito){
       digitalWrite(buzer, HIGH);
       delay(50);
       digitalWrite(buzer, LOW);
       temp += digito;
       cont++;
    }
    if (temp.length() >= 4){
      if (temp == senha){
        cont = 0;
        noite=true;
        delay(1000);
        break;
      }
      else {
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print(" Senha Incorreta ");
        digitalWrite(buzer, HIGH);
        delay(50);
        digitalWrite(buzer, LOW);
        delay(50);
        digitalWrite(buzer, HIGH);
        delay(50);
        digitalWrite(buzer, LOW);
        delay(50);
        digitalWrite(buzer, HIGH);
        delay(50);
        digitalWrite(buzer, LOW);
        cont = 0;
        delay(2000);
        lcd.clear();
        break;
      }
    }
  }
}
